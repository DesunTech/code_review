name: AI Code Review

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
      statuses: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 50

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install AI Code Reviewer
      run: |
        pip install aiohttp anthropic openai pydantic PyYAML jsonschema tenacity asyncio-throttle requests
        python -m pip install -e .

    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          echo "base_sha=${BASE_SHA}" >> $GITHUB_OUTPUT
          echo "head_sha=${HEAD_SHA}" >> $GITHUB_OUTPUT
        else
          BASE_SHA="${{ github.event.before }}"
          HEAD_SHA="${{ github.sha }}"
          echo "base_sha=${BASE_SHA}" >> $GITHUB_OUTPUT
          echo "head_sha=${HEAD_SHA}" >> $GITHUB_OUTPUT
        fi

    - name: Run AI Code Review
      id: code-review
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        OPENROUTER_MODEL: ${{ secrets.OPENROUTER_MODEL }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event_name == 'pull_request' && github.event.number || '' }}
        AI_PROVIDER: ${{ vars.AI_PROVIDER || 'auto' }}
        REVIEW_SEVERITY: ${{ vars.REVIEW_SEVERITY || 'major' }}
      run: |
        CHANGED_FILES=$(git diff --name-only ${{ steps.changed-files.outputs.base_sha }}..${{ steps.changed-files.outputs.head_sha }} | head -10)

        if echo "$CHANGED_FILES" | grep -q "\.tsx\|\.ts"; then
          LANG="typescript"
        elif echo "$CHANGED_FILES" | grep -q "\.jsx\|\.js"; then
          LANG="javascript"
        elif echo "$CHANGED_FILES" | grep -q "\.py"; then
          LANG="python"
        elif echo "$CHANGED_FILES" | grep -q "\.java"; then
          LANG="java"
        elif echo "$CHANGED_FILES" | grep -q "\.go"; then
          LANG="go"
        elif echo "$CHANGED_FILES" | grep -q "\.rs"; then
          LANG="rust"
        elif echo "$CHANGED_FILES" | grep -q "\.php"; then
          LANG="php"
        elif echo "$CHANGED_FILES" | grep -q "\.rb"; then
          LANG="ruby"
        elif echo "$CHANGED_FILES" | grep -q "\.cpp\|\.cc\|\.cxx"; then
          LANG="cpp"
        elif echo "$CHANGED_FILES" | grep -q "\.c"; then
          LANG="c"
        else
          LANG=$(find . -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.java" -o -name "*.go" -o -name "*.rs" | head -1 | sed 's/.*\.//' || echo "unknown")
        fi

        if [ -f "package.json" ]; then
          if grep -q "react-native" package.json; then
            PROJECT_TYPE="react-native"
          elif grep -q "next" package.json; then
            PROJECT_TYPE="nextjs"
          elif grep -q "react" package.json; then
            PROJECT_TYPE="react"
          else
            PROJECT_TYPE="nodejs"
          fi
        elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
          PROJECT_TYPE="python"
        elif [ -f "go.mod" ]; then
          PROJECT_TYPE="go"
        elif [ -f "Cargo.toml" ]; then
          PROJECT_TYPE="rust"
        else
          PROJECT_TYPE="general"
        fi

        echo "Detected language: $LANG, project type: $PROJECT_TYPE"

        if [ -z "${{ steps.changed-files.outputs.base_sha }}" ] || [ -z "${{ steps.changed-files.outputs.head_sha }}" ]; then
          echo "❌ Error: Could not determine commit SHAs for diff"
          exit 1
        fi

        set +e
        ai-code-reviewer \
          --base ${{ steps.changed-files.outputs.base_sha }} \
          --head ${{ steps.changed-files.outputs.head_sha }} \
          --provider ${AI_PROVIDER} \
          --language $LANG \
          --project-type $PROJECT_TYPE \
          --output json \
          --save-report review-results.json \
          --fail-on ${REVIEW_SEVERITY}

        REVIEW_EXIT_CODE=$?
        set -e

        if [ ! -f "review-results.json" ]; then
          echo "[]" > review-results.json
          echo "⚠️ Review completed but no results generated (exit code: $REVIEW_EXIT_CODE)"
        fi

        echo "Review process completed with exit code: $REVIEW_EXIT_CODE"

    - name: Upload review results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ai-code-review-results-${{ github.run_number }}
        path: review-results.json
        retention-days: 30

    - name: Initial PR Comment
      if: github.event_name == 'pull_request' && github.event.action == 'opened'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          let totalAdditions = 0;
          let totalDeletions = 0;
          let changesSummary = [];

          files.forEach(file => {
            totalAdditions += file.additions;
            totalDeletions += file.deletions;

            let changeType = 'Modified';
            if (file.status === 'added') changeType = 'Added';
            else if (file.status === 'removed') changeType = 'Removed';
            else if (file.status === 'renamed') changeType = 'Renamed';

            changesSummary.push({
              file: file.filename,
              status: changeType,
              additions: file.additions,
              deletions: file.deletions,
              summary: generateChangeSummary(file)
            });
          });

          function generateChangeSummary(file) {
            const ext = path.extname(file.filename);
            const baseName = path.basename(file.filename);

            if (file.status === 'added') return `New ${getFileType(ext)} file created`;
            if (file.status === 'removed') return `${getFileType(ext)} file deleted`;
            if (file.status === 'renamed') return `File renamed from ${file.previous_filename}`;

            if (ext === '.json' || ext === '.yml' || ext === '.yaml') {
              return `Configuration changes in ${baseName}`;
            } else if (ext === '.js' || ext === '.ts' || ext === '.jsx' || ext === '.tsx') {
              return `Code changes in ${baseName}`;
            } else if (ext === '.css' || ext === '.scss' || ext === '.less') {
              return `Styling updates in ${baseName}`;
            } else if (ext === '.md') {
              return `Documentation updates in ${baseName}`;
            }

            return `Updates to ${baseName}`;
          }

          function getFileType(ext) {
            const types = {
              '.js': 'JavaScript', '.ts': 'TypeScript', '.jsx': 'React', '.tsx': 'React TypeScript',
              '.py': 'Python', '.java': 'Java', '.go': 'Go', '.rs': 'Rust', '.php': 'PHP', '.rb': 'Ruby',
              '.css': 'CSS', '.scss': 'SCSS', '.html': 'HTML', '.json': 'JSON', '.yml': 'YAML', '.yaml': 'YAML',
              '.md': 'Markdown', '.txt': 'Text'
            };
            return types[ext] || 'File';
          }

          function estimateReviewEffort(files, additions, deletions) {
            const totalChanges = additions + deletions;
            const fileCount = files.length;

            let complexity = 1;
            if (fileCount > 10) complexity += 2;
            else if (fileCount > 5) complexity += 1;

            if (totalChanges > 500) complexity += 3;
            else if (totalChanges > 100) complexity += 2;
            else if (totalChanges > 50) complexity += 1;

            const hasComplexFiles = files.some(f =>
              f.filename.includes('config') || f.filename.includes('package.json') ||
              f.filename.includes('.yml') || f.filename.includes('Dockerfile')
            );
            if (hasComplexFiles) complexity += 1;

            const minutes = Math.max(1, Math.min(complexity * 2, 15));
            return `${complexity} (~${minutes} minute${minutes > 1 ? 's' : ''})`;
          }

          function generateChangePoem(files, totalChanges) {
            const isStyleChange = files.some(f => f.filename.includes('config') || f.filename.includes('.css'));
            const isSecurityChange = files.some(f => f.filename.includes('auth') || f.filename.includes('security'));
            const isNewFeature = files.some(f => f.status === 'added' && f.additions > 20);

            if (isSecurityChange) {
              return "A shield was forged in code today,\\nTo keep the hackers all at bay.\\nWith fixes bright,\\nAnd logic tight,\\nSecurity wins the day! 🛡️✨";
            } else if (isNewFeature) {
              return "New features bloom like flowers in spring,\\nFresh code and functions that make hearts sing.\\nWith logic clear,\\nAnd bugs nowhere near,\\nInnovation is a wonderful thing! 🌸✨";
            } else if (isStyleChange) {
              return "A comma hopped out, light as can be,\\nFrom the config file, now tidy and free.\\nThe code is more neat,\\nWith no extra beat—\\nThis bunny approves, with a whiskery Whee! 🐰✨";
            } else if (totalChanges < 10) {
              return "Small changes make the biggest waves,\\nLike gentle tweaks that improvement saves.\\nThough tiny in size,\\nThey're mighty and wise,\\nClean code is what every dev craves! ⚡✨";
            } else {
              return "Code flows like a river, steady and true,\\nChanges ripple through, making things new.\\nWith each commit's art,\\nYou're playing your part,\\nIn building something amazing for me and you! 🚀✨";
            }
          }

          const walkthrough = files.length === 1
            ? `A single change was made to the ${files[0].filename} file, ${files[0].status === 'modified' ? 'modifying' : files[0].status === 'added' ? 'adding' : 'removing'} ${files[0].additions + files[0].deletions} line${(files[0].additions + files[0].deletions) !== 1 ? 's' : ''}. ${generateDetailedWalkthrough(files[0])}`
            : `${files.length} files were modified across the codebase, affecting ${totalAdditions + totalDeletions} lines of code. The changes span multiple areas including ${getChangeAreas(files).join(', ')}.`;

          function generateDetailedWalkthrough(file) {
            if (file.filename.includes('config')) {
              return 'This appears to be a configuration update that may affect build or runtime behavior.';
            } else if (file.filename.includes('package.json')) {
              return 'Dependencies or package metadata have been updated.';
            } else if (file.filename.includes('README') || file.filename.includes('.md')) {
              return 'Documentation has been updated to improve clarity or add new information.';
            }
            return 'Code modifications have been made to enhance functionality or fix issues.';
          }

          function getChangeAreas(files) {
            const areas = new Set();
            files.forEach(file => {
              if (file.filename.includes('src/')) areas.add('source code');
              if (file.filename.includes('test/') || file.filename.includes('spec/')) areas.add('tests');
              if (file.filename.includes('config') || file.filename.includes('.json')) areas.add('configuration');
              if (file.filename.includes('docs/') || file.filename.includes('.md')) areas.add('documentation');
              if (file.filename.includes('.css') || file.filename.includes('.scss')) areas.add('styling');
            });
            return Array.from(areas);
          }

          const changesTable = changesSummary.map(change =>
            `| ${change.file} | ${change.summary} |`
          ).join('\\n');

          const reviewEffort = estimateReviewEffort(files, totalAdditions, totalDeletions);
          const poem = generateChangePoem(files, totalAdditions + totalDeletions);

          const comment = `## 🔍 AI Code Review Started\n\n### Walkthrough\n${walkthrough}\n\n### Changes\n| File | Change Summary |\n|------|----------------|\n${changesTable}\n\n### Estimated code review effort\n${reviewEffort}\n\n### Poem\n${poem}\n\n### 📋 Review Details\n- **Files to review**: ${files.length}\n- **Total changes**: +${totalAdditions}/-${totalDeletions}\n- **Review scope**: ${files.length === 1 ? 'Single file' : 'Multiple files'}\n- **Complexity**: ${totalAdditions + totalDeletions > 100 ? 'High' : totalAdditions + totalDeletions > 30 ? 'Medium' : 'Low'}\n\n---\n⏳ **AI analysis in progress...** Detailed results will be posted shortly.\n\n*Review powered by AI Code Reviewer* 🤖`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Enhanced PR Summary Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          try {
            const reviewData = JSON.parse(fs.readFileSync('review-results.json', 'utf8'));

            const { data: prFiles } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const filesReviewed = prFiles.length;
            const totalChanges = prFiles.reduce((sum, f) => sum + f.additions + f.deletions, 0);

            if (reviewData.length === 0) {
              const comment = `## 🤖 AI Code Review Summary\n\n### 📊 Results\n✅ **No issues found!** Your code looks great.\n\n### 📋 Analysis Details\n- **Files reviewed**: ${filesReviewed}\n- **Total changes**: +${prFiles.reduce((sum, f) => sum + f.additions, 0)}/-${prFiles.reduce((sum, f) => sum + f.deletions, 0)}\n- **Code quality**: Excellent\n- **Security check**: ✅ Passed\n- **Performance impact**: None detected\n- **Best practices**: ✅ Followed\n\n### 🎯 Recommendation\nThis change is safe to merge! ${totalChanges < 10 ? 'The small focused change maintains code quality.' : 'All modifications follow established patterns and best practices.'}\n\n---\n*Powered by AI Code Reviewer - Keeping your code clean and secure! 🚀*`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              return;
            }

            const categories = {};
            reviewData.forEach(finding => {
              if (!categories[finding.category]) {
                categories[finding.category] = { critical: [], major: [], minor: [], info: [] };
              }
              categories[finding.category][finding.severity].push(finding);
            });

            const critical = reviewData.filter(r => r.severity === 'critical');
            const major = reviewData.filter(r => r.severity === 'major');
            const minor = reviewData.filter(r => r.severity === 'minor');
            const info = reviewData.filter(r => r.severity === 'info');

            let comment = '## 🤖 AI Code Review Summary\\n\\n';

            comment += '### 📊 Results\\n';
            if (critical.length > 0) comment += `🔴 **${critical.length} critical issue${critical.length > 1 ? 's' : ''} found** - Immediate attention required\\n`;
            if (major.length > 0) comment += `🟠 **${major.length} major issue${major.length > 1 ? 's' : ''} found** - Should be addressed before merge\\n`;
            if (minor.length > 0) comment += `🟡 **${minor.length} minor issue${minor.length > 1 ? 's' : ''} found** - Consider addressing\\n`;
            if (info.length > 0) comment += `ℹ️ **${info.length} suggestion${info.length > 1 ? 's' : ''} available** - Optional improvements\\n`;

            comment += '\\n### 📋 Analysis Details\\n';
            comment += `- **Files reviewed**: ${filesReviewed}\\n`;
            comment += `- **Total changes**: +${prFiles.reduce((sum, f) => sum + f.additions, 0)}/-${prFiles.reduce((sum, f) => sum + f.deletions, 0)}\\n`;
            comment += `- **Review confidence**: ${critical.length === 0 && major.length === 0 ? 'High' : critical.length > 0 ? 'Critical issues detected' : 'Medium'}\\n`;

            comment += '\\n### 🔍 Findings by Category\\n\\n';

            const categoryEmojis = {
              'security': '🔒', 'performance': '⚡', 'logic': '🧠', 'style': '🎨',
              'best practices': '📏', 'maintainability': '🔧', 'testing': '🧪', 'documentation': '📖'
            };

            Object.keys(categories).sort().forEach(categoryName => {
              const categoryFindings = categories[categoryName];
              const totalInCategory = Object.values(categoryFindings).flat().length;

              if (totalInCategory === 0) return;

              const emoji = categoryEmojis[categoryName.toLowerCase()] || '📌';
              comment += `#### ${emoji} ${categoryName.charAt(0).toUpperCase() + categoryName.slice(1)}\\n`;

              ['critical', 'major', 'minor', 'info'].forEach(severity => {
                categoryFindings[severity].forEach(finding => {
                  const severityEmoji = { 'critical': '🔴', 'major': '🟠', 'minor': '🟡', 'info': 'ℹ️' }[severity];
                  comment += `- ${severityEmoji} **${finding.file}** (lines ${finding.line_start}-${finding.line_end}): ${finding.message}\\n`;

                  if (finding.fixed_code) {
                    comment += `  ✅ **Fixed**:\\n  \\\`\\\`\\\`\\n  ${finding.fixed_code}\\n  \\\`\\\`\\\`\\n`;
                  } else if (finding.suggestion) {
                    comment += `  💡 **Suggestion**: ${finding.suggestion}\\n`;
                  }
                  if (finding.impact) {
                    comment += `  ⚠️ **Impact**: ${finding.impact}\\n`;
                  }
                });
              });
              comment += '\\n';
            });

            comment += '### 🎯 Recommendation\\n';
            if (critical.length > 0) {
              comment += '❌ **Not recommended to merge** - Critical issues must be resolved first.\\n';
            } else if (major.length > 0) {
              comment += '⚠️ **Review required** - Major issues should be addressed before merge.\\n';
            } else if (minor.length > 0) {
              comment += '✅ **Safe to merge** - Minor issues can be addressed in follow-up commits.\\n';
            } else {
              comment += '✅ **Ready to merge** - All checks passed!\\n';
            }

            if (reviewData.length > 8) {
              comment += `\\n📄 **Full details**: Check the [complete report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for all ${reviewData.length} findings.\\n`;
            }

            comment += '\\n---\\n*Powered by AI Code Reviewer - Keeping your code clean and secure! 🚀*';

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

          } catch (error) {
            console.log('No review results found or error reading file:', error);
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🤖 AI Code Review Summary\n\n### ⚠️ Analysis Error\nReview completed but results could not be processed. This might be due to:\n- No changes detected in supported file types\n- Configuration issues with the AI provider\n- Network connectivity problems\n\n### 🔧 Troubleshooting\nCheck the [workflow logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for detailed error information.\n\n---\n*Powered by AI Code Reviewer* 🤖`
            });
          }

    - name: Set status check
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let state = 'success';
          let description = 'No issues found';

          try {
            const reviewData = JSON.parse(fs.readFileSync('review-results.json', 'utf8'));
            const critical = reviewData.filter(r => r.severity === 'critical').length;
            const major = reviewData.filter(r => r.severity === 'major').length;

            if (critical > 0) {
              state = 'failure';
              description = `${critical} critical issue(s) found`;
            } else if (major > 0) {
              state = 'failure';
              description = `${major} major issue(s) found`;
            } else if (reviewData.length > 0) {
              state = 'success';
              description = `${reviewData.length} minor/info issue(s) found`;
            }
          } catch (error) {
            state = 'error';
            description = 'Could not complete code review';
          }

          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            description: description,
            context: 'AI Code Review'
          });

    - name: Security scan (additional)
      if: contains(github.event.head_commit.message, '[security-scan]')
      run: |
        echo "🔒 Running additional security scan..."
        ai-code-reviewer \
          --base ${{ steps.changed-files.outputs.base_sha }} \
          --head ${{ steps.changed-files.outputs.head_sha }} \
          --provider ${AI_PROVIDER} \
          --fail-on critical \
          --language $LANG \
          --project-type security-focused \
          --save-report security-scan.json || echo "Security scan completed with findings"

    - name: Upload security scan
      if: contains(github.event.head_commit.message, '[security-scan]')
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: security-scan.json
        retention-days: 30