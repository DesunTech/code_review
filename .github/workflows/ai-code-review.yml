name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper diff

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install aiohttp
        pip install anthropic  # If using Anthropic's official SDK

    - name: Detect language and project type
      id: detect
      run: |
        # Detect primary language
        if [ -f "package.json" ]; then
          echo "language=javascript" >> $GITHUB_OUTPUT
          echo "project_type=node" >> $GITHUB_OUTPUT
        elif [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
          echo "language=python" >> $GITHUB_OUTPUT
          echo "project_type=python" >> $GITHUB_OUTPUT
        elif [ -f "go.mod" ]; then
          echo "language=go" >> $GITHUB_OUTPUT
          echo "project_type=go" >> $GITHUB_OUTPUT
        elif [ -f "Cargo.toml" ]; then
          echo "language=rust" >> $GITHUB_OUTPUT
          echo "project_type=rust" >> $GITHUB_OUTPUT
        else
          echo "language=unknown" >> $GITHUB_OUTPUT
          echo "project_type=general" >> $GITHUB_OUTPUT
        fi

    - name: Run AI Code Review
      id: review
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

        # Save the reviewer script
        cat > ai_code_reviewer.py << 'EOF'
        ${{ steps.read-artifact.outputs.content }}
        EOF

        # Determine base branch
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
        else
          BASE_BRANCH="${{ github.event.before }}"
          HEAD_BRANCH="${{ github.sha }}"
        fi

        # Run the review
        python ai_code_reviewer.py \
          --base "$BASE_BRANCH" \
          --head "$HEAD_BRANCH" \
          --output markdown \
          --fail-on major \
          --save-report review_report.md \
          --language "${{ steps.detect.outputs.language }}" \
          --project-type "${{ steps.detect.outputs.project_type }}"

        # Capture exit code
        echo "exit_code=$?" >> $GITHUB_OUTPUT

    - name: Upload review report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: code-review-report
        path: review_report.md

    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('review_report.md', 'utf8');

          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.data.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Code Review Report')
          );

          const body = `ðŸ¤– **AI Code Review Results**\n\n${report}`;

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

    - name: Set status check
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const exitCode = ${{ steps.review.outputs.exit_code || 1 }};
          const state = exitCode === 0 ? 'success' : 'failure';
          const description = exitCode === 0
            ? 'Code review passed!'
            : 'Code review found issues';

          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            description: description,
            context: 'AI Code Review'
          });

  # Additional quality checks
  static-analysis:
    runs-on: ubuntu-latest
    needs: code-review

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run language-specific linters
      run: |
        # Python
        if [ -f "requirements.txt" ]; then
          pip install flake8 black mypy
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          mypy . || true
        fi

        # JavaScript/TypeScript
        if [ -f "package.json" ]; then
          npm install
          npm run lint || true
        fi

        # Go
        if [ -f "go.mod" ]; then
          go fmt ./...
          go vet ./...
          golangci-lint run || true
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: code-review

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scans
      run: |
        # Run multiple security tools based on language

        # Python
        if [ -f "requirements.txt" ]; then
          pip install bandit safety
          bandit -r . || true
          safety check || true
        fi

        # JavaScript
        if [ -f "package.json" ]; then
          npm audit || true
        fi

        # General
        # You can add tools like Semgrep, CodeQL, etc.

  # Summary job
  review-summary:
    runs-on: ubuntu-latest
    needs: [code-review, static-analysis, security-scan]
    if: always()

    steps:
    - name: Download review report
      uses: actions/download-artifact@v3
      with:
        name: code-review-report

    - name: Create summary
      run: |
        echo "# ðŸ“Š Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Add review report
        if [ -f "review_report.md" ]; then
          cat review_report.md >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ”— [View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY